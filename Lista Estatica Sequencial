#include<stdio.h>

#define MAX 500

typedef struct{
    char nome[30];
    int conta;

}CLIENTE;
typedef struct{
    CLIENTE vetor[MAX];
    int nElem;
}LISTA;

void CriarLista(LISTA *lista){
    lista->nElem = 0;
}

void InserirFinal(LISTA *lista, CLIENTE cl){
    lista->vetor[lista->nElem] = cl;
    lista->nElem = lista->nElem +1;
}

void InserirPosicao(LISTA *lista, CLIENTE cl, int pos){
    int i;
    if(pos >= lista->nElem)
    {
        InserirFinal(lista, cl);
    }
    else{
        for(i = lista->nElem; i>pos; i--)
        {
            lista->vetor[i] = lista->vetor[i-1];
        }
        lista->vetor[pos] = cl;
        lista->nElem = lista->nElem +1;

    }
}

void InserirInicio(LISTA *lista, CLIENTE cl){
    InserirPosicao(lista,cl, 0);
}

CLIENTE *AcessarListadoInicio(LISTA *lista, int pos){
    if(pos<lista->nElem)
    {
        return &lista->vetor[pos];
    }
    else{
        return NULL;
    }
}

CLIENTE *AcessarListaDoFim(LISTA *lista, int pos){
    if(pos<lista->nElem)
    {
        return &lista->vetor[lista->nElem-pos-1];
    }
    else{
        return NULL;
    }
}

void ListarDoInicio(LISTA *lista){
    CLIENTE cl;
    int i;
    for(i=0; i<lista->nElem; i++)
    {
        cl = lista->vetor[i];
        printf("\n**Nome: %s....",cl.nome);
        printf("Conta: %d\n",cl.conta);
    }

}

void ListarDoFim(LISTA *lista){
    int i;
    CLIENTE cl;
    for(i=lista->nElem-1; i>=0; i--)
    {
        cl =lista->vetor[i];
        printf("\nNome: %s....",cl.nome);
        printf("Conta: %d\n",cl.conta);
    }
}


int DestruirLista(LISTA *lista){
    lista->nElem = 0;
}
void EliminarLista(LISTA *lista, int pos){
    if(pos < lista->nElem)
    {
        if(pos==lista->nElem-1)
        {
            lista->nElem = lista->nElem -1;
        }
        else{
            for(int i = pos; i<lista->nElem-1; i++)
            {
                lista->vetor[i] = lista->vetor[i+1];
            }
            lista->nElem = lista->nElem-1;
        }

    }
}

CLIENTE *BuscarEnderecoPeloNome(LISTA *lista, char nome[]){
    for(int i = 0; i<lista->nElem; i++)
    {
        if(strcmp(nome, lista->vetor[i].nome) == 0)
        {
            return &lista->vetor[i];
        }
        else{
            NULL;
        }
    }
}

int BuscarPosicaoPeloNome(LISTA *lista, char nome[]){
    for(int i = 0; i<lista->nElem; i++)
    {
        if(strcmp(nome, lista->vetor[i].nome)==0)
        {
            return i;
        }
    }
     return -1;

}
int main()
{
    LISTA lista;
    CLIENTE cl;
    CLIENTE *cb;
    CriarLista(&lista);
    int op=-1;
    int pos;
    char nome[30];

    while(op!=0)
    {
        printf("\n 1 Criar Lista");
        printf("\n 2 Inserir no inicio");
        printf("\n 3 Inserir no Fim");
        printf("\n 4 Inserir posição");
        printf("\n 5 Acessar do inicio");
        printf("\n 6 Acessar do fim");
        printf("\n 7 Listar do Inicio");
        printf("\n 8 Listar do fim");
        printf("\n 9 Buscar Endereço pelo nome");
        printf("\n 10 Buscar posição pelo nome");
        printf("\n 11 Eliminar lista");
        printf("\n 12 Destruir Lista");
        printf("\ninforme a Operação: ");
        scanf("%d", &op);

        switch(op)
        {
        case 1:
            CriarLista(&lista);
            break;
        case 2:
            printf("\nNome: ");
            fflush(stdin);
            gets(cl.nome);
            printf("\nConta: ");
            scanf("%d", &cl.conta);
            InserirInicio(&lista, cl);
            break;
        case 3:
            printf("\nNome: ");
            fflush(stdin);
            gets(cl.nome);
            printf("\nConta: ");
            scanf("%d", &cl.conta);
            InserirFinal(&lista, cl);
            break;
        case 4:
            printf("\nNome: ");
            fflush(stdin);
            gets(cl.nome);
            printf("\nConta: ");
            scanf("%d", &cl.conta);
            printf("\nPosição para inserir: ");
            scanf("%d", &pos);
            InserirPosicao(&lista, cl, pos);
            break;
        case 5:
            printf("\nPosição para Acesso: ");
            scanf("%d", &pos);
            cb = AcessarListadoInicio(&lista,pos);
            if(cb!=NULL)
            {
                printf("\nNome: %s",cb->nome);
                printf("\nConta: %d",cb->conta);
            }
            else
                printf("\nPosição inexistente!");
            break;
        case 6:
            printf("\nPosição para Acesso: ");
            scanf("%d", &pos);
            cb = AcessarListaDoFim(&lista, pos);
            if(cb!=NULL)
            {
                printf("\nNome: %s",cb->nome);
                printf("\nConta: %d",cb->conta);
            }
            else
                printf("\nPosição inexistente!");
            break;
        case 7:
            ListarDoInicio(&lista);
            break;
        case 8:
            ListarDoFim(&lista);
            break;
        case 9:
            printf("\nNome: ");
            fflush(stdin);
            gets(nome);
            cb = BuscarEnderecoPeloNome(&lista,nome);
            if(cb!=NULL)
            {
                BuscarEnderecoPeloNome(&lista,nome);
                printf("Nome: %s\n",cb->nome);
                printf("Conta: %d\n",cb->conta);
                printf("Posição: %d\n\n", BuscarEnderecoPeloNome(&lista,nome));
            }
            else{
                printf("\nNome não Consta na Lista!");
            }
            break;
        case 10:
            printf("\nNome: ");
            fflush(stdin);
            gets(nome);
            pos = BuscarPosicaoPeloNome(&lista,nome);
            if(pos >= 0)
            {
                printf("Posição : %d\n", pos);
                cb = AcessarListadoInicio(&lista, pos);
                printf("Nome: %s\n",cb->nome);
                printf("Conta: %d\n",cb->conta);
                printf("Posição: %d\n\n", BuscarPosicaoPeloNome(&lista, nome));
            }
            else{
                printf("\nNome não Consta na Lista!");
            }
            break;
        case 11:

            printf("\nPosição para Eliminar: ");
            scanf("%d", &pos);
            EliminarLista(&lista, pos);
            break;
        case 12:
            DestruirLista(&lista);
            break;
        case 0:
            printf("\nSaiu do Programa!\n");
            break;

        }

    }
}












